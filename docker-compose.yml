version: '3.8'
# This application uses Redis for:
# 1. Message aggregation with a configurable debounce period (default: 5 seconds)
#    to collect multiple messages sent in rapid succession before processing them together.
# 2. Smart rate limiting that only counts LLM API calls, not individual messages
#    (default: 5 calls per minute per user).

services:
  bot:
    build: .
    depends_on:
      - postgres
      - redis
    environment:
      # Database configuration
      - PG_CONNECTION_STRING=postgresql://langbotuser:yourpassword@postgres:5432/langbotdb
      - REDIS_URL=redis://redis:6379/0
      
      # Telegram configuration
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - DEBOUNCE_TIME=${DEBOUNCE_TIME:-5.0}
      - LLM_CALLS_PER_MINUTE=${LLM_CALLS_PER_MINUTE:-5}
      
      # Agent configuration
      - LLM_MODEL=${LLM_MODEL:-gpt-4o-mini}
      - EMBED_MODEL=${EMBED_MODEL:-openai:text-embedding-3-small}
      - VECTOR_DIMS=${VECTOR_DIMS:-1536}
      
      # API Keys
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - LANGCHAIN_API_KEY=${LANGCHAIN_API_KEY}
      - LANGCHAIN_TRACING_V2=${LANGCHAIN_TRACING_V2:-true}
      
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    restart: unless-stopped
    networks:
      - bot-network

  postgres:
    image: ankane/pgvector:latest
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=langbotuser
      - POSTGRES_PASSWORD=yourpassword
      - POSTGRES_DB=langbotdb
    ports:
      - "5432:5432"
    networks:
      - bot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U langbotuser -d langbotdb"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2-alpine
    command: redis-server --save 60 1 --loglevel warning
    volumes:
      - redis-data:/data
    networks:
      - bot-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

networks:
  bot-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
